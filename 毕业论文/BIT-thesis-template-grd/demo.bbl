% Generated by BUPTThesis.bst, version: 0.2 (2009/01/25)
\begin{thebibliography}{10}

\bibitem{chess2011software}
Chess~B, Arkin~B.
Software security in practice~[J].
IEEE Security \& Privacy, 2011, 9~(2):  89--92.

\bibitem{shan2002}
单国栋, 戴英侠, 王航.
计算机漏洞分类研究~[J].
计算机工程, 2002, 28~(10):  3--6.

\bibitem{vassilev2014importance}
Vassilev~A, Hall~T~A.
The importance of entropy to information security~[J].
Computer, 2014, 47~(2):  78--81.

\bibitem{li2017wannacry}
李潇, 刘俊奇, 范明翔.
WannaCry 勒索病毒预防及应对策略研究~[J].
电脑知识与技术: 学术交流, 2017, 13~(7):  19--20.

\bibitem{zhang2014}
张钢.
[S.~l.]: .
[s.~n.], 2014.

\bibitem{hovemeyer2005evaluating}
Hovemeyer~D, Spacco~J, Pugh~W.
Evaluating and tuning a static analysis to find null pointer bugs~[C].
In ACM SIGSOFT Software Engineering Notes, 2005:  13--19.

\bibitem{gong2008}
宫云战, 赵瑞莲, 张威.
软件测试教程~[M].
2008.

\bibitem{gong2006}
宫云战.
软件测试~[M].
国防工业出版, 2006.

\bibitem{coverity2009}
Coverity Scan Report.
\url{https://www.synopsys.com/blogs/software-security/}.

\bibitem{osman2016tracking}
Osman~H, Leuenberger~M, Lungu~M, et~al.
Tracking null checks in open-source Java systems~[C].
In Software Analysis, Evolution, and Reengineering (SANER), 2016 IEEE 23rd
  International Conference on, 2016:  304--313.

\bibitem{wei2009safety}
Wei~P.
The Safety Of Software Design Loophole Dynamic State Examination Technique
  Analysis [J]~[J].
CD Technology, 2009, 4:  015.

\bibitem{lin2008static}
Lin~Z, Qing-kai~Z.
Static detecting techniques of software security flaws~[J].
Computer Engineering, 2008, 34~(12):  157--159.

\bibitem{xie2007saturn}
Xie~Y, Aiken~A.
Saturn: A scalable framework for error detection using boolean
  satisfiability~[J].
ACM Transactions on Programming Languages and Systems (TOPLAS), 2007, 29~(3):
  ~16.

\bibitem{wang2015}
王锐强.
基于判断逻辑的空指针引用模式检测~[D].
[S.~l.]: 北京邮电大学, 2015.

\bibitem{wangxu2015}
王旭.
基于控制流分析和数据流分析的Java程序静态检测方法的研究~[D].
[S.~l.]: 西安电子科技大学, 2015.

\bibitem{loginov2008verifying}
Loginov~A, Yahav~E, Chandra~S, et~al.
Verifying dereference safety via expanding-scope analysis~[C].
In Proceedings of the 2008 international symposium on Software testing and
  analysis, 2008:  213--224.

\bibitem{madhavan2011null}
Madhavan~R, Komondoor~R.
Null dereference verification via over-approximated weakest pre-conditions
  analysis~[J].
ACM Sigplan Notices, 2011, 46~(10):  1033--1052.

\bibitem{wala}
Wala.
\url{http://wala.sourceforge.net}.

\bibitem{hovemeyer2007finding}
Hovemeyer~D, Pugh~W.
Finding more null pointer bugs, but not too many~[C].
In Proceedings of the 7th ACM SIGPLAN-SIGSOFT workshop on Program analysis for
  software tools and engineering, 2007:  9--14.

\bibitem{nanda2009accurate}
Nanda~M~G, Sinha~S.
Accurate interprocedural null-dereference analysis for Java~[C].
In Proceedings of the 31st International Conference on Software Engineering,
  2009:  133--143.

\bibitem{yangrui2012}
杨睿.
数组空指针故障的静态测试方法与实现~[D].
[S.~l.]: 北京邮电大学, 2012.

\bibitem{jiang2017}
姜淑娟, 王兴亚, 张艳梅, et~al.
空指针异常的自动故障定位方法~[J].
通信学报, 2017, 36~(1):  18--29.

\end{thebibliography}
